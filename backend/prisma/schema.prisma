// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(CANDIDATE)
  avatar    String?
  initials  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  jobs      Job[]
  applications JobApplication[]
  interviews Interview[] @relation("CandidateInterviews")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String?
  location  String?
  skills    String[]
  education Education[]
  experience Experience[]
}

model Job {
  id             String           @id @default(uuid())
  title          String
  description    String
  jobOverview    String[]
  responsibilities String[]
  department     String
  location       String
  salary         Float
  status         JobStatus        @default(OPEN)
  team           String
  hiringManager  String?          
  company        String?          
  userId         String?          
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  applications   JobApplication[]
  documents      ApplicationDocument[]
}

model Education {
  id            String    @id @default(uuid())
  profileId     String
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  institution   String
  degree        String
  fieldOfStudy  String?
  startDate     DateTime
  endDate       DateTime?
  description   String?
}

model Experience {
  id            String    @id @default(uuid())
  profileId     String
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  company       String
  position      String
  startDate     DateTime
  endDate       DateTime?
  description   String?
}

model JobApplication {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    ApplicationStatus @default(APPLIED)
  currentStage String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  interviews Interview[]
  notes      String?
}

model ApplicationDocument {
  id              String         @id @default(uuid())
  jobId           String
  job             Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  name            String
  fileType        String
  fileUrl         String
  uploadedBy      String
  uploadedAt      DateTime       @default(now())
  description     String?
}

model Interview {
  id              String   @id @default(uuid())
  candidateId     String
  candidate       User     @relation("CandidateInterviews", fields: [candidateId], references: [id], onDelete: Cascade)
  jobApplicationId String?
  jobApplication  JobApplication? @relation(fields: [jobApplicationId], references: [id], onDelete: SetNull)
  interviewers    String[]
  interviewType   InterviewType
  status          InterviewStatus @default(UPCOMING)
  scheduledDate   DateTime
  duration        Int      @default(45) 
  notes           String?
  rating          Float?   @db.Real
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum JobStatus {
  OPEN
  CLOSED
  IN_PROGRESS
  FILLED
  CANCELLED
}

enum ApplicationStatus {
  APPLIED
  INTERVIEWED
  OFFERED
  REJECTED
}

enum InterviewType {
  TECHNICAL
  HR_SCREENING
  PORTFOLIO_REVIEW
  FINAL_INTERVIEW
}

enum InterviewStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}

enum UserRole {
  CANDIDATE
  EMPLOYER
}
